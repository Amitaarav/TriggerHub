services:
  frontend:
    build:
      context: .
      dockerfile: docker/Dockerfile.fe
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL}
    depends_on:
      - primbackend

  primbackend:
    build:
      context: .
      dockerfile: docker/Dockerfile.primbackend
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - db

  processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    environment:
      DATABASE_URL: ${DATABASE_URL}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_CREATE_TOPICS: "zap-events:1:1"
    depends_on:
      - db
      - kafka

  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile.worker
    environment:
      DATABASE_URL: ${DATABASE_URL}
      KAFKA_BROKERS: ${KAFKA_BROKERS}
      KAFKA_CREATE_TOPICS: "zap-events:1:1"
    depends_on:
      - db
      - kafka

  hook:
    build:
      context: .
      dockerfile: docker/Dockerfile.hook
    ports:
      - "${HOOK_PORT}:${HOOK_PORT}"
    environment:
      DATABASE_URL: ${DATABASE_URL}
    depends_on:
      - db

  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./docker/db/init:/docker-entrypoint-initdb.d

  kafka:
    image: bitnami/kafka:3.7
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      ALLOW_PLAINTEXT_LISTENER: yes

volumes:
  db_data:
